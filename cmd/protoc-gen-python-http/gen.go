package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
)

// GenerateFile generates a _http.py file containing python client classes.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_http.py"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("# -*- coding: utf-8 -*-")
	g.P("# Generated by the protocol buffer compiler. DO NOT EDIT!")
	g.P("# See https://github.com/eolymp/python-proto-http for more details.")
	g.P("\"\"\"Generated protocol buffer code.\"\"\"")
	g.P()
	g.P("from google.protobuf import symbol_database as _symbol_database")
	g.P()
	g.P("_sym_db = _symbol_database.Default()")
	g.P()
	g.P()

	GenerateFileContent(gen, file, g)
	return g
}

// GenerateFileContent generates the gRPC service definitions, excluding the package statement.
func GenerateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("class ", service.GoName, "Client:")
	g.P("    def __init__(self, transport):")
	g.P("        self.transport = transport")
	g.P("")

	for _, method := range service.Methods {
		g.P("    def ", method.GoName, "(self, request, **kwargs):")
		g.P("        return self.transport.request(")
		g.P("            url=", fmt.Sprintf("%#v", fmt.Sprint(service.Desc.FullName(), "/", method.Desc.Name())), ",")
		g.P("            request=request,")
		g.P("            response_obj=_sym_db.GetSymbol(", fmt.Sprintf("%#v", method.Output.Desc.FullName()), "),")
		g.P("            **kwargs,")
		g.P("        )")
		g.P("")
	}
}
